import csv
import os


import traceback
from cProfile import label
import tkinter as tk
import random
import threading
import time
from collections import defaultdict
from queue import Queue
import sys
from queue import Empty





MUTEX = threading.Lock()

PACJENTOW =  1 
PIELEGNIARKI = random.randint(3,9)
LEKARZE_NA_ODDZIAL = (1, 5)  

ODDZIALY = ["Chirurgia", "Interna", "Ortopedia", "Neurologia", "Kardiologia", "Pediatria", "Onkologia"]
KOLORY = ["red", "blue", "green", "orange", "purple", "brown", "pink", "gray", "olive", "cyan"]
BADANIA = ["RTG", "USG", "EKG", "KREW", "Konsultacja", "Kolonoskopia", "Gastroskopia", "CT", "MR", "Biopsja"]
P_BADANIA = 0.7

def srednia(lista):
    return round(sum(lista) / len(lista), 2) if lista else 0

class Pacjent:
    def __init__(self, id, canvas, app):
        self.id = id
        self.krytycznosc = random.randint(50, 200)  
        self.status = "Izba"
        self.oddzial_docelowy = None
        self.badania_do_wykonania = []
        if random.random() < P_BADANIA:
            ile = random.randint(1, 4)
            self.badania_do_wykonania = random.sample(BADANIA, ile)
        else:
            self.badania_do_wykonania = []

        self.w_trakcie_badania = False
        self.lock = threading.Lock()  

        self.liczba_badan = 0
        self.czy_ma_lozko = False
        self.index_lozka = None

        self.czas_u_pielegniarki = 0  
        self.start_pielegniarki = None

        self.canvas = canvas
        self.color = KOLORY[id % len(KOLORY)]
        self.x, self.y = 0, 0
        self.czas_na_odziale = 0
        self.oval = canvas.create_oval(self.x, self.y, self.x + 15, self.y + 15, fill=self.color)
        self.leki = {}
        self.label = canvas.create_text(
            self.x, self.y + 25,
            text=f"{self.krytycznosc}%", font=("Arial", 8),
            fill="black",
            tags=f"label_pacjent_{self.id}"
        )

        self.historia = {
            "czas_w_szpitalu": 0,
            "czas_oczekiwania_na_lozko": 0,
            "czas_w_izbie": 0,
            "czas_u_pielegniarki": 0,
            "czas_przyjecia_na_oddzial": 0,
            "leki_przyjete": {},
            "badania": [],
            "czas_przybycia": app.symulowany_czas if hasattr(app, "symulowany_czas") else 0 # czas przybycia do szpitala
        }

        print(f"Pacjent {self.id} ({self.status}) - badania: {self.badania_do_wykonania}, czas na oddziale: {self.czas_na_odziale}")


    def move_to(self, x, y):
        dx, dy = x - self.x, y - self.y
        self.x, self.y = x, y

        def update_gui():
            try:
                self.canvas.move(self.oval, dx, dy)
                self.canvas.move(self.label, dx, dy)

                
                oddzial = self.status.split()[-1]  
                self.canvas.itemconfig(self.label, text=f" {self.id} || {int(self.krytycznosc)} | {oddzial}")

                
                if self.krytycznosc > 120:
                    outline = "yellow"
                elif self.krytycznosc > 60:
                    outline = "orange"
                elif self.krytycznosc > 0:
                    outline = "red"
                else:
                    outline = "black"

                self.canvas.itemconfig(self.oval, outline=outline, width=3)

            except Exception as e:
                print(f"[move_to] Blad aktualizacji GUI pacjenta {self.id}: {e}")

        self.canvas.after(0, update_gui)


class Lekarz(threading.Thread):
    def __init__(self, nazwa_oddzialu, x, y, canvas, numer, app_ref):
        super().__init__()
        self.app = app_ref
        self.nazwa = nazwa_oddzialu
        self.numer  = numer

        self.dlugosc_dyzuru = random.choice( [6*60, 8*60, 12*60, 24*60])  

        offset = random.randint(0, 6 * 60)
        self.start_dyzuru = self.app.symulowany_czas - offset  
        self.w_pracy = True

        self.x = x
        self.y = y
        self.canvas = canvas
        self.kolejka = []
        self.pacjent = None
        self.gotowi = []

        self.w_gabinecie = True
        self.czas_poza_gabinetem = 0
        self.czas_rozpoczecia_obchodu = None
        self.czas_pracy = 0
        self.lock = MUTEX
        self.stop_event = threading.Event()
        self.rect_id = None
        self.label_id = None

        self.rect_id = canvas.create_rectangle(
            self.x - 20, self.y + 25, self.x + 35, self.y + 45,
            outline="black", fill="lightgray"
        )
        self.label_id = canvas.create_text(
            self.x + 7, self.y + 35, text=f"Lekarz {self.numer}", font=("Arial", 7)
        )




    def skonsultuj(self, pacjent):
        with self.lock:
            self.kolejka.append(pacjent)

    def run(self):
        while not self.stop_event.is_set():
            
            if self.w_pracy and (self.app.symulowany_czas - self.start_dyzuru >= self.dlugosc_dyzuru) and self.pacjent is None:
                print(f" Lekarz {self.nazwa} #{self.numer} konczy dyzur i idzie na 12h przerwy.")
                self.w_pracy = False
                self.start_dyzuru = self.app.symulowany_czas
                self.canvas.itemconfig(self.rect_id, fill="gray")
                continue

            
            if not self.w_pracy:
                if self.app.symulowany_czas - self.start_dyzuru >= 12 * 60:
                    print(f" Lekarz {self.nazwa} #{self.numer} wraca do pracy.")
                    self.w_pracy = True
                    self.dlugosc_dyzuru = random.choice([12 * 60, 24 * 60])
                    self.start_dyzuru = app.symulowany_czas
                    self.canvas.itemconfig(self.rect_id, fill="lightgreen")
                else:
                    time.sleep(0.1)
                    continue

            
            if self.w_gabinecie and random.random() < 0.01:
                self.w_gabinecie = False
                self.czas_rozpoczecia_obchodu = time.monotonic()
                print(f"Lekarz {self.nazwa} #{self.numer} wyszedl na oddzial.")

            if not self.w_gabinecie and self.czas_rozpoczecia_obchodu is not None:
                if time.monotonic() - self.czas_rozpoczecia_obchodu > 5:
                    self.w_gabinecie = True
                    print(f"Lekarz {self.nazwa} #{self.numer} wrocil do gabinetu.")
                time.sleep(0.1)
                continue

            
            with self.lock:
                pacjent = self.kolejka.pop(0) if self.kolejka else None

            if pacjent is None or pacjent.status == "Zmarl":
                time.sleep(0.1)
                continue

            if pacjent:
                with self.lock:
                    self.pacjent = pacjent
                    pacjent.status = f"Konsultacja {self.nazwa}"
                time.sleep(random.uniform(2, 4))

                
                
                
                
                

                
                

                pacjent.status = f"{self.nazwa} - gotowy"
                self.gotowi.append(pacjent)
                with self.lock:
                    self.pacjent = None
            else:
                time.sleep(0.1)

    def zatrzymaj(self):
        self.stop_event.set()

    def get_pacjent(self):
        with self.lock:
            return self.pacjent

    def get_kolejka(self):
        with self.lock:
            return list(self.kolejka)


class Oddzial:
    def __init__(self, nazwa, liczba_lozek, lekarze, app):
        self.nazwa = nazwa
        self.lozka = [None for _ in range(liczba_lozek)]
        self.kolejka = Queue()
        self.lock = MUTEX
        self.lekarze = lekarze 
        self.app = app

    def przyjmij_pacjenta(self, pacjent):
        losowy_lekarz = random.choice(self.lekarze)
        losowy_lekarz.skonsultuj(pacjent)

    def zakwateruj_po_konsultacji(self, pacjent):
        with self.lock:
            if pacjent in self.lozka:
                return True
            
            if pacjent in list(self.kolejka.queue):
                return False

            for i in range(len(self.lozka)):
                if self.lozka[i] is None:
                    self.lozka[i] = pacjent
                    pacjent.status = f"{self.nazwa}|lozko {i + 1}"

                    pacjent.historia["czas_przyjecia_na_oddzial"] = self.app.symulowany_czas

                    pacjent.czy_ma_lozko = True
                    pacjent.historia["czas_oczekiwania_na_lozko"] = self.app.symulowany_czas - pacjent.historia[
                        "czas_przybycia"]

                    pacjent.index_lozka = i

                    pacjent.leki = {}
                    for lek_nazwa in random.sample(list(app.leki.keys()), random.randint(1, 4)):
                        czestotliwosc = random.choice([8, 12, 24])  
                        pacjent.leki[lek_nazwa] = {
                            "czestotliwosc": czestotliwosc,
                            "ostatnio": app.symulowany_czas  # czas zakwaterowania
                        }

                    return True

            
            self.kolejka.put(pacjent)
            pacjent.status = f"{self.nazwa}|czeka"
            return False

    def zwolnij_lozko(self, pacjent):
        with self.lock:
            idx = None
            for i in range(len(self.lozka)):
                if self.lozka[i] == pacjent:
                    self.lozka[i] = None
                    idx = i
                    break
            if idx is not None and not self.kolejka.empty():
                nowy = self.kolejka.get()
                self.lozka[idx] = nowy
                nowy.status = f"{self.nazwa} - lozko {idx + 1}"
                nowy.czy_ma_lozko = True
                nowy.index_lozka = idx

class GabinetBadania:
    def __init__(self, nazwa, x, y, canvas):
        self.nazwa = nazwa
        self.kolejka = Queue()
        self.x = x
        self.y = y
        self.canvas = canvas
        self.aktywny_pacjent = None
        self.lock = MUTEX
        self.rect_id = None
        self.label_id = None

    def dodaj_pacjenta(self, pacjent):
        self.kolejka.put(pacjent)

    def get_kolejka(self):
        with self.lock:
            return list(self.kolejka.queue)

    def set_aktywny(self, pacjent):
        with self.lock:
            self.aktywny_pacjent = pacjent

    def get_aktywny(self):
        with self.lock:
            return self.aktywny_pacjent

class LekarzDiagnosta(threading.Thread):
    def __init__(self, gabinet, oddzialy, app_ref):
        super().__init__()
        self.app = app_ref
        self.gabinet = gabinet
        self.oddzialy = oddzialy
        self.stop_event = threading.Event()

    def run(self):
        while not self.stop_event.is_set():
            try:
                pacjent = self.gabinet.kolejka.get(timeout=1)
            except Empty:
                continue  

            try:
                if pacjent.status == "Zmarl":
                    continue

                self.gabinet.set_aktywny(pacjent)
                pacjent.status = f"Badanie: {self.gabinet.nazwa}"
                pacjent.w_trakcie_badania = True
                pacjent.historia["badania"].append(self.gabinet.nazwa)
                pacjent.move_to(self.gabinet.x, self.gabinet.y)
                time.sleep(random.uniform(3, 5))

                self.app.popraw_krytycznosc(pacjent, random.randint(10, 50))

                oddzial = self.oddzialy.get(pacjent.oddzial_docelowy)
                if oddzial and self.app.sprawdz_zgon(pacjent, oddzial):
                    self.gabinet.set_aktywny(None)
                    pacjent.w_trakcie_badania = False
                    continue

                if self.gabinet.nazwa in pacjent.badania_do_wykonania:
                    pacjent.badania_do_wykonania.remove(self.gabinet.nazwa)

                pacjent.historia["badania"].append(self.gabinet.nazwa)
                self.app.statystyki["badania"][self.gabinet.nazwa] += 1

                pacjent.move_to(self.gabinet.x, self.gabinet.y + 30)
                self.gabinet.set_aktywny(None)
                with pacjent.lock:
                    pacjent.w_trakcie_badania = False
                if pacjent.krytycznosc <= 0:
                    if oddzial:
                        self.app.sprawdz_zgon(pacjent, oddzial)
                    continue

                if pacjent.czy_ma_lozko:
                    pacjent.status = "Powrot na lozko"

                elif pacjent.badania_do_wykonania:
                    kolejny = pacjent.badania_do_wykonania[0]
                    with pacjent.lock:
                        if not pacjent.w_trakcie_badania:
                            self.app.gabinety_badan[kolejny].dodaj_pacjenta(pacjent)
                            pacjent.w_trakcie_badania = True

                elif oddzial:
                    
                    if oddzial.zakwateruj_po_konsultacji(pacjent):
                        pacjent.status = f"{oddzial.nazwa} - lozko {pacjent.index_lozka + 1}"
                    else:
                        pacjent.status = f"{oddzial.nazwa} (oczekuje)"
                        with oddzial.lock:
                            if pacjent not in list(oddzial.kolejka.queue):
                                oddzial.kolejka.put(pacjent)

            except Exception as e:
                print(f"[Diagnosta] Blad podczas przetwarzania pacjenta: {e}")
                traceback.print_exc()

    def zatrzymaj(self):
        self.stop_event.set()


class Pielegniarka(threading.Thread):
    def __init__(self, id, x, y, canvas, oddzialy, kolejka_wejsciowa, app_ref):
        super().__init__()
        self.app = app_ref
        self.id = id
        self.x = x
        self.y = y

        self.dlugosc_dyzuru = random.choice([12 * 60, 24 * 60])  
        offset = random.randint(0, 6 * 60)  
        self.start_dyzuru = self.app.symulowany_czas - offset
        self.w_pracy = True
        self.start_przerwy = None

        self.niedostepna = random.random() < 0.2  

        self.canvas = canvas
        self.oddzialy = oddzialy
        self.kolejka = kolejka_wejsciowa
        self.pacjent = None
        self.stop_event = threading.Event()
        self.lock = MUTEX

    def run(self):
        while not self.stop_event.is_set():
            try:
                
                
                if self.w_pracy and (self.app.symulowany_czas - self.start_dyzuru >= self.dlugosc_dyzuru):
                    with self.lock:
                        if self.pacjent is not None:
                            
                            time.sleep(0.1)
                            continue
                        print(f" Pielegniarka {self.id + 1} konczy dyzur i idzie na przerwe.")
                        self.w_pracy = False
                        self.start_przerwy = self.app.symulowany_czas

                    
                    if self.w_pracy and (self.app.symulowany_czas - self.start_dyzuru >= self.dlugosc_dyzuru):
                        print(f" Pielegniarka {self.id + 1} konczy dyzur i idzie na przerwe.")
                        self.w_pracy = False
                        self.start_przerwy = self.app.symulowany_czas

                    else:
                        
                        time.sleep(0.1)
                        continue

                
                if not self.w_pracy:
                    if self.app.symulowany_czas - self.start_przerwy >= 12 * 60:
                        print(f" Pielegniarka {self.id + 1} wraca po przerwie.")
                        self.w_pracy = True
                        self.dlugosc_dyzuru = random.choice([12 * 60, 24 * 60])
                        self.start_dyzuru = self.app.symulowany_czas
                    else:
                        time.sleep(1)
                        continue

                
                if self.w_pracy and not self.niedostepna and random.random() < 0.02:
                    self.niedostepna = True
                    print(f" Pielegniarka {self.id + 1} chwilowo niedostepna (dokumentacja)")
                    threading.Thread(target=self.symuluj_niedostepnosc).start()

                
                if self.niedostepna:
                    time.sleep(1)
                    continue

                
                with self.kolejka.mutex:
                    if not self.kolejka.queue:
                        time.sleep(0.1)
                        continue

                    
                    kolejka_lista = [p for p in self.kolejka.queue if p is not None and p.status != "Zmarl"]
                    if not kolejka_lista:
                        time.sleep(0.1)
                        continue

                    kolejka_lista.sort(key=lambda p: p.krytycznosc)
                    pacjent = kolejka_lista.pop(0)

                    self.kolejka.queue.clear()
                    self.kolejka.queue.extend(kolejka_lista)

                
                if pacjent is None:
                    time.sleep(0.1)
                    continue

                    kolejka_lista.sort(key=lambda p: p.krytycznosc)
                    pacjent = kolejka_lista.pop(0)
                    self.kolejka.queue.clear()
                    self.kolejka.queue.extend(kolejka_lista)

                with self.lock:
                    self.pacjent = pacjent
                    pacjent.status = f"Pielegniarka {self.id + 1}"

                pacjent.start_pielegniarki = self.app.symulowany_czas

                czas = self.app.symulowany_czas - pacjent.historia["czas_przybycia"]
                self.app.statystyki["sredni_czas_w_izbie"].append(czas / 60)  # czas w izbie w minutach


                
                time_start = time.time()
                time_to_work = random.uniform(2, 4)
                while time.time() - time_start < time_to_work:
                    if self.stop_event.is_set():
                        return
                    time.sleep(0.1)



                
                oddzial_obj = random.choice(list(self.oddzialy.values()))
                pacjent.status = f"Oddzial {oddzial_obj.nazwa}"
                pacjent.oddzial_docelowy = oddzial_obj.nazwa



                
                with self.lock:
                    self.pacjent = None
                    pacjent.czas_u_pielegniarki = self.app.symulowany_czas - pacjent.start_pielegniarki
                    if "Pielegniarka" in pacjent.status:
                        pacjent.status = f"Oczekuje: {oddzial_obj.nazwa}"

                
                if random.random() < 0.5:
                    
                    pacjent.status = f"Oczekuje: {oddzial_obj.nazwa}"
                    oddzial_obj.przyjmij_pacjenta(pacjent)
                else:
                    
                    if oddzial_obj.zakwateruj_po_konsultacji(pacjent):
                        pacjent.status = f"{oddzial_obj.nazwa} - lozko {pacjent.index_lozka + 1}"
                    else:
                        pacjent.status = f"{oddzial_obj.nazwa} (oczekuje)"

                
                
                
                
                
                




            except Exception as e:
                print(f"Blad watku pielegniarki {self.id + 1}: {e}")
                time.sleep(0.1)

    def symuluj_niedostepnosc(self):
        time.sleep(random.randint(1, 5))  
        self.niedostepna = False
        print(f" Pielegniarka {self.id + 1} wrocila do przyjmowania pacjentow")

    def zatrzymaj(self):
        self.stop_event.set()

    def get_pacjent(self):
        with self.lock:
            return self.pacjent


class Lek:
    def __init__(self, nazwa):
        self.nazwa = nazwa
        self.ilosc = random.randint(3, 10)
        self.prog_minimalny = random.randint(2, 5)
        self.sztuki_dozamowienia = random.randint(5, 10)
        self.lock = threading.Lock() 

    def zuzyj(self):
        with self.lock:
            if self.ilosc < 0:
                print(f" Lek {self.nazwa} niedostepny - podanie wstrzymane!")
                return False
            self.ilosc -= 1

            print(f" Podano lek {self.nazwa}, pozostalo {self.ilosc} szt.")
            if self.ilosc < self.prog_minimalny:
                self.zamow()
            return True

    def zamow(self):
        print(f"Zamowienie leku {self.nazwa}: {self.sztuki_dozamowienia} sztuk")
        self.ilosc += self.sztuki_dozamowienia
        print(f"Stan leku {self.nazwa}: {self.ilosc} sztuk")


class Symulacja:
    def __init__(self, root):
        self.canvas = tk.Canvas(root, width=1900, height=1000, bg='white')
        self.canvas.pack()
        self.root = root
        root.protocol("WM_DELETE_WINDOW", self.zakoncz_program)
        self.symulowany_czas = 8 * 60
        self.symulacja_tick = 0

        self.statystyki = {
            "zgonow": 0,
            "wypisani": 0,
            "leki": defaultdict(int),
            "badania": defaultdict(int),
            "sredni_czas_ocz_na_lozko": [],
            "sredni_czas_w_szpitalu": [],
            "sredni_czas_w_izbie": [],
            "nowi_pacjenci_dzienni": []  # lista krotek: (ciezki, sredni, lekki)

        }


        
        self.csv_folder = "statystyki"
        os.makedirs(self.csv_folder, exist_ok=True)
        self.csv_file = os.path.join(self.csv_folder, f"statystyki_{int(time.time())}.csv")

        with open(self.csv_file, mode="w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow([
                "dzien",
                "nowi pacjenci - stan ciezki",
                "nowi pacjenci - stan sredni",
                "nowi pacjenci - stan lekki",
                "zgony",
                "wypisani",
                "sredni czas w izbie (min)",
                "sredni czas ocz. na lozko (min)",
                "sredni czas w szpitalu (min)",
                "leki",
                "badania"
            ])

            

            self.csv_oddzialy_file = os.path.join(self.csv_folder, f"oddzialy_{int(time.time())}.csv")
            with open(self.csv_oddzialy_file, mode="w", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow([
                    "dzien", "oddzial", "pacjenci_przyjeci", "zgony", "wypisy",
                    "badania_przeprowadzone", "%_zapelnienia_lozek", "pacjenci_na_lekarza"
                ])

        self.pacjenci = [Pacjent(i, self.canvas, self) for i in range(PACJENTOW)]
        self.kolejka_wejsciowa = Queue()
        for pacjent in self.pacjenci:
            self.kolejka_wejsciowa.put(pacjent)

        self.lekarze = {}
        for i, nazwa in enumerate(ODDZIALY):
            ilu = random.randint(*LEKARZE_NA_ODDZIAL)
            lekarze_list = []
            for j in range(ilu):
                x = 100 + i * 250  
                y = 450 + j * 60
                lekarz = Lekarz(f"{nazwa}", x, y, self.canvas, j + 1, self)
                lekarz.start()
                lekarze_list.append(lekarz)
            self.lekarze[nazwa] = lekarze_list

        
        
        for lekarze_list in self.lekarze.values():
            for lekarz in lekarze_list:
                
                rect_x1 = lekarz.x - 40
                rect_y1 = lekarz.y - 20
                rect_x2 = lekarz.x + 40
                rect_y2 = lekarz.y + 20

                self.canvas.coords(lekarz.rect_id, rect_x1, rect_y1, rect_x2, rect_y2)
                self.canvas.coords(lekarz.label_id, lekarz.x, lekarz.y)

        self.oddzialy = {
            nazwa: Oddzial(nazwa, liczba_lozek=random.randint(3, 15), lekarze=self.lekarze[nazwa], app=self)
            for nazwa in ODDZIALY
        }

        self.gabinety_badan = {
            nazwa: GabinetBadania(nazwa, 100 + i * 150, 850, self.canvas)
            for i, nazwa in enumerate(BADANIA)
        }

        self.leki = {
            "Aspiryna": Lek("Aspiryna"),
            "Ibuprofen": Lek("Ibuprofen"),
            "Paracetamol": Lek("Paracetamol"),
            "Antybiotyk": Lek("Antybiotyk"),
            "Leki przeciwbolowe": Lek("Leki przeciwbolowe")
        }

        for i, (nazwa, gabinet) in enumerate(self.gabinety_badan.items()):
            gabinet_x = gabinet.x
            gabinet_y = gabinet.y
            width, height = 80, 40
            rect = self.canvas.create_rectangle(
                gabinet_x - width // 2,
                gabinet_y - height // 2,
                gabinet_x + width // 2,
                gabinet_y + height // 2,
                outline="black"
            )
            label = self.canvas.create_text(
                gabinet_x, gabinet_y, text=nazwa, font=("Arial", 9, "bold")
            )
            gabinet.rect_id = rect
            gabinet.label_id = label
        self.diagnosci = []
        for gabinet in self.gabinety_badan.values():
            diagnosta = LekarzDiagnosta(gabinet, self.oddzialy, self)
            diagnosta.start()
            self.diagnosci.append(diagnosta)


        self.wypisani = []
        self.zmarli = []

        self.pielegniarki = []
        for i in range(PIELEGNIARKI):
            x_pos = 150 + i * 150
            pielegniarka = Pielegniarka(i, x_pos, 100, self.canvas, self.oddzialy, self.kolejka_wejsciowa, self)
            pielegniarka.start()
            self.pielegniarki.append(pielegniarka)

        self.draw_labels()
        self.lozka_graficzne = {}
        self.lozka_rects = {}
        self.rysuj_lozka()
        self.update_gui()

        self.nastepny_id = PACJENTOW
        self.generuj_pacjentow_thread = threading.Thread(target=self.generuj_nowych_pacjentow)
        self.generuj_pacjentow_thread.daemon = True
        self.generuj_pacjentow_thread.start()

    def generuj_nowych_pacjentow(self):
        while True:
            czas = random.uniform(1, 2)
            time.sleep(czas)

            nowy = Pacjent(self.nastepny_id, self.canvas, self)
            self.nastepny_id += 1
            self.pacjenci.append(nowy)
            self.kolejka_wejsciowa.put(nowy)
            print(f" Nowy pacjent {nowy.id} dodany do kolejki (co {czas:.2f}s)")




            dzien = self.symulowany_czas // (24 * 60) + 1  

            
            while len(self.statystyki["nowi_pacjenci_dzienni"]) <= dzien:
                self.statystyki["nowi_pacjenci_dzienni"].append((0, 0, 0))

            
            if nowy.krytycznosc < 70:
                typ = "krytyczny"
            elif nowy.krytycznosc < 130:
                typ = "sredni"
            else:
                typ = "lekki"

            k, s, l = self.statystyki["nowi_pacjenci_dzienni"][dzien]
            if typ == "krytyczny":
                k += 1
            elif typ == "sredni":
                s += 1
            else:
                l += 1

            self.statystyki["nowi_pacjenci_dzienni"][dzien] = (k, s, l)

    def draw_labels(self):
        self.canvas.create_text(100, 30, text="Izba Przyjec", font=("Arial", 10))
        for i, nazwa in enumerate(ODDZIALY):
            self.canvas.create_text(100 + i * 250, 160, text=f"Oddzial {nazwa}", font=("Arial", 10))
            self.canvas.create_text(100 + i * 250, 400, text=f"Lekarz {nazwa}", font=("Arial", 9))
        self.canvas.create_text(1550, 750, text="Wypisani", font=("Arial", 10))
        self.canvas.create_text(1750, 750, text="Kostnica", font=("Arial", 10))
        self.canvas.create_text(1650, 50, text="Stan magazynu lekow", font=("Arial", 10, "bold"))

        
        
        

        for i, nazwa in enumerate(BADANIA):
            self.canvas.create_text(100 + i * 150, 780, text=f"GABINET {nazwa}", font=("Arial", 9))

    def rysuj_lozka(self):
        for idx, (nazwa, oddzial) in enumerate(self.oddzialy.items()):
            for i in range(len(oddzial.lozka)):
                rzad = i // 3  
                kol = i % 3  

                base_x = 50 + idx * 250
                lx = base_x + kol * 50
                ly = 180 + rzad * 40

                rect = self.canvas.create_rectangle(lx, ly, lx + 30, ly + 20, outline="black")
                label = self.canvas.create_text(lx + 15, ly + 10, text=f"L{i + 1}", font=("Arial", 7))
                self.lozka_graficzne[(nazwa, i)] = (lx + 7, ly + 2)
                self.lozka_rects[(nazwa, i)] = rect

    def obniz_krytycznosc(self, pacjent, ile):
        pacjent.krytycznosc -= ile
        if pacjent.krytycznosc < 0:
            pacjent.krytycznosc = 0

    def popraw_krytycznosc(self, pacjent, ile):
        pacjent.krytycznosc = min(pacjent.krytycznosc + ile, 250)  

    def sprawdz_zgon(self, pacjent, oddzial):
        if pacjent and pacjent.krytycznosc <= 0 and pacjent.status != "Zmarl":
            pacjent.status = "Zmarl"


            czas_w_szpitalu = self.symulowany_czas - pacjent.historia["czas_przybycia"]
            self.statystyki["sredni_czas_w_szpitalu"].append(czas_w_szpitalu)
            self.statystyki["zgonow"] += 1


            self.zmarli.append(pacjent)


            if oddzial:
                oddzial.zwolnij_lozko(pacjent)
            else:
                print(f" Pacjent {pacjent.id} zmarl, ale nie byl przypisany do zadnego oddzialu.")

            print(f" Pacjent {pacjent.id} zmarl.")

            
            
            self.canvas.itemconfig(pacjent.oval, outline="black", width=3)
            self.canvas.itemconfig(pacjent.label, text="")

            
            with self.kolejka_wejsciowa.mutex:
                try:
                    self.kolejka_wejsciowa.queue.remove(pacjent)
                except ValueError:
                    pass

            
            for lekarze in self.lekarze.values():
                for lekarz in lekarze:
                    with lekarz.lock:
                        if pacjent in lekarz.kolejka:
                            lekarz.kolejka.remove(pacjent)
                        if lekarz.pacjent == pacjent:
                            lekarz.pacjent = None

            
            for oddzial in self.oddzialy.values():
                with oddzial.lock:
                    try:
                        oddzial.kolejka.queue.remove(pacjent)
                    except ValueError:
                        pass

            
            for gabinet in self.gabinety_badan.values():
                with gabinet.lock:
                    if gabinet.aktywny_pacjent == pacjent:
                        gabinet.aktywny_pacjent = None
                    try:
                        gabinet.kolejka.queue.remove(pacjent)
                    except ValueError:
                        pass

            return True
        return False

    def sprawdz_wypis(self, pacjent, oddzial):
        if pacjent is None:
            return False
        if pacjent.krytycznosc >= 250 and pacjent.status != "Wypisany":
            self.statystyki["wypisani"] += 1
            czas = pacjent.historia.get("czas_w_szpitalu", 0)
            self.statystyki["sredni_czas_w_szpitalu"].append(czas)
            ocz = pacjent.historia.get("czas_oczekiwania_na_lozko", 0)
            self.statystyki["sredni_czas_ocz_na_lozko"].append(ocz)

            for lek, liczba in pacjent.historia["leki_przyjete"].items():
                self.statystyki["leki"][lek] = self.statystyki["leki"].get(lek, 0) + liczba
            for bad in pacjent.historia["badania"]:
                self.statystyki["badania"][bad] = self.statystyki["badania"].get(bad, 0) + 1

            pacjent.status = "Wypisany"
            pacjent.historia["czas_w_szpitalu"] = self.symulowany_czas - pacjent.historia["czas_przybycia"]
            self.wypisani.append(pacjent)
            oddzial.zwolnij_lozko(pacjent)
            print(f" Pacjent {pacjent.id} zostal wypisany.")
            return True
        return False

    def update_gui(self):
        try:
            if self.symulowany_czas % (60 * 24) == 0 and self.symulacja_tick == 9:
                self.zapisz_statystyki_csv()

            for i, pacjent in enumerate(list(self.kolejka_wejsciowa.queue)):
                pacjent.move_to(50 + i * 30, 50)
                self.obniz_krytycznosc(pacjent, 0.2)  

            
            liczniki_pacjentow = [0 for _ in self.pielegniarki]
            for i, pielegniarka in enumerate(self.pielegniarki):
                if pielegniarka.get_pacjent():
                    liczniki_pacjentow[i] += 1

            
            self.canvas.delete("pielegniarka_label")
            self.canvas.delete("pacjent_przy_pielegniarce")

            for i, pielegniarka in enumerate(self.pielegniarki):
                x_pos = pielegniarka.x

                if not pielegniarka.w_pracy and pielegniarka.get_pacjent() is None:
                    kolor = "red"
                elif pielegniarka.niedostepna:
                    kolor = "orange"
                else:
                    kolor = "black"

                
                self.canvas.create_text(
                    x_pos, 65,
                    text=f"{liczniki_pacjentow[i]} pac.",
                    font=("Arial", 8),
                    fill="black",
                    tags="pielegniarka_label"
                )

                self.canvas.create_text(
                    x_pos, 80,
                    text=f"Pielegniarka {i + 1}",
                    font=("Arial", 10, "bold"),
                    fill=kolor,
                    tags="pielegniarka_label"
                )

                obslugiwany_pacjent = pielegniarka.get_pacjent()

                if obslugiwany_pacjent is not None:
                    obslugiwany_pacjent.move_to(pielegniarka.x, pielegniarka.y + 10)

            self.canvas.delete("gabinet_info")

            for gabinet in self.gabinety_badan.values():
                pacjent = gabinet.get_aktywny()
                if pacjent and pacjent.status != "Zmarl":
                    if pacjent is None or pacjent.status == "Zmarl":
                        continue
                    self.canvas.itemconfig(gabinet.rect_id, fill=pacjent.color)
                    pacjent.move_to(gabinet.x, gabinet.y)
                else:
                    self.canvas.itemconfig(gabinet.rect_id, fill="white")

                for j, p in enumerate(gabinet.get_kolejka()):
                    p.move_to(gabinet.x + j * 18, gabinet.y + 65)
                    self.obniz_krytycznosc(p, 0.2)  

                    
                self.canvas.create_text(
                    gabinet.x, gabinet.y + 100,
                    text=f"{len(gabinet.get_kolejka())} w kolejce",
                    font=("Arial", 8),
                    fill="black",
                    tags="gabinet_info"
                )

                
                aktywny = f"1 w gabinecie: {pacjent.id}" if gabinet.get_aktywny() else "pusto"
                self.canvas.create_text(
                    gabinet.x, gabinet.y - 35,
                    text=aktywny,
                    font=("Arial", 8),
                    fill="gray",
                    tags="gabinet_info"
                )

            for idx, oddzial in enumerate(self.oddzialy.values()):
                nazwa = oddzial.nazwa

                
                for i, pacjent in enumerate(oddzial.lozka):
                    rect_id = self.lozka_rects[(nazwa, i)]
                    color = pacjent.color if pacjent else "green"
                    self.canvas.itemconfig(rect_id, fill=color)

                    
                    if self.sprawdz_zgon(pacjent, oddzial):
                        continue

                    if pacjent:
                        
                        if self.sprawdz_zgon(pacjent, oddzial):
                            continue

                        
                        if pacjent.krytycznosc >= 250: 
                            pacjent.status = "Wypisany"
                            self.wypisani.append(pacjent)
                            oddzial.zwolnij_lozko(pacjent)
                            continue

                        
                        if pacjent.krytycznosc <= 0:
                            pacjent.status = "Zmarl"
                            self.zmarli.append(pacjent)
                            oddzial.zwolnij_lozko(pacjent)
                            continue

                        
                        if pacjent:
                            self.popraw_krytycznosc(pacjent,0.1)  

                        
                        for lek_nazwa, info in pacjent.leki.items():
                            czest = info["czestotliwosc"]
                            ostatni = info["ostatnio"]

                            if self.symulowany_czas - ostatni >= czest * 60:
                                pacjent.historia["leki_przyjete"][lek_nazwa] = pacjent.historia["leki_przyjete"].get(
                                    lek_nazwa, 0) + 1
                                if lek_nazwa in self.leki:
                                    if self.leki[lek_nazwa].zuzyj():
                                        pacjent.leki[lek_nazwa]["ostatnio"] = self.symulowany_czas
                                        self.popraw_krytycznosc(pacjent, random.randint(10,50))  
                                        print(f" Pacjent {pacjent.id} poprawil stan po {lek_nazwa}")


                                        self.statystyki["leki"][lek_nazwa] += 1

                                    else:
                                        pacjent.krytycznosc -= 10  
                                        if random.random() < 0.1:
                                            
                                            if random.random() < 0.1:
                                                losowy_lek = random.choice(list(self.leki.keys()))
                                                print(
                                                    f" Bledne podanie: Pacjent {pacjent.id} dostal {losowy_lek} poza harmonogramem")
                                                self.leki[losowy_lek].zuzyj()
                                            
                                            
                                            
                                            
                                            

                        
                        if random.random() < 0.02:  
                            dostepne = list(set(BADANIA) - set(pacjent.badania_do_wykonania))
                            if dostepne:
                                nowe_badanie = random.choice(dostepne)
                                pacjent.badania_do_wykonania.append(nowe_badanie)
                                with pacjent.lock:
                                    if not pacjent.w_trakcie_badania:
                                        self.gabinety_badan[nowe_badanie].dodaj_pacjenta(pacjent)
                                        pacjent.w_trakcie_badania= True
                                        print(f" Pacjent {pacjent.id} (lozko) dostal nowe badanie: {nowe_badanie}")

                        
                        lx, ly = self.lozka_graficzne[(nazwa, i)]
                        pacjent.move_to(lx, ly)

                
                for j, pacjent in enumerate(list(oddzial.kolejka.queue)):
                    if pacjent is None or pacjent.status == "Zmarl":
                        continue
                    x = 100 + idx * 250 + (j % 3) * 40  
                    y = 235 + (j // 3) * 20  
                    pacjent.move_to(x, y)
                    self.obniz_krytycznosc(pacjent, 0.2)  

                
                for lekarz in oddzial.lekarze:
                    while lekarz.gotowi:
                        pacjent = lekarz.gotowi.pop(0)
                        if pacjent.badania_do_wykonania:
                            pierwsze = pacjent.badania_do_wykonania[0]
                            self.gabinety_badan[pierwsze].dodaj_pacjenta(pacjent)
                        else:
                            oddzial.zakwateruj_po_konsultacji(pacjent)

                for lekarz in oddzial.lekarze:
                    pacjent = lekarz.get_pacjent()
                    if pacjent:
                        pacjent.move_to(lekarz.x + 7, lekarz.y + 15)  

                    for j, p in enumerate(lekarz.get_kolejka()):
                        if pacjent is None or pacjent.status == "Zmarl":
                            continue
                        p.move_to(lekarz.x + 45 + j * 20, lekarz.y - 10)  
                        self.obniz_krytycznosc(p, 0.2)  

                    
                for pacjent in self.pacjenci:
                    if self.sprawdz_zgon(pacjent, self.oddzialy.get(pacjent.oddzial_docelowy)):
                        continue
                    if self.sprawdz_wypis(pacjent, self.oddzialy.get(pacjent.oddzial_docelowy)):
                        continue

                    if pacjent.status == "Powrot na lozko" and pacjent.czy_ma_lozko and pacjent.index_lozka is not None:
                        for oddzial in self.oddzialy.values():
                            if any(pacjent == p for p in oddzial.lozka if p is not None):
                                break
                        else:
                            
                            for oddzial in self.oddzialy.values():
                                for i, lozko in enumerate(oddzial.lozka):
                                    if lozko is None and i == pacjent.index_lozka:
                                        oddzial.lozka[i] = pacjent
                                        pacjent.status = f"{oddzial.nazwa} - lozko {i + 1}"
                                        break
                    elif pacjent.status == "Powrot na lozko" and not pacjent.czy_ma_lozko:
                        
                        for oddzial in self.oddzialy.values():
                            if pacjent not in oddzial.kolejka.queue and pacjent not in oddzial.lozka:
                                oddzial.zakwateruj_po_konsultacji(pacjent)
                                break

            
            with oddzial.lock:
                for i in range(len(oddzial.lozka)):
                    if oddzial.lozka[i] is None and not oddzial.kolejka.empty():
                        nowy = oddzial.kolejka.get()
                        oddzial.lozka[i] = nowy
                        nowy.status = f"{oddzial.nazwa} - lozko {i + 1}"
                        nowy.czy_ma_lozko = True
                        nowy.index_lozka = i
                        nowy.leki = {}

                        
                        for lek_nazwa in random.sample(list(self.leki.keys()), random.randint(1, 4)):
                            czestotliwosc = random.choice([8, 12, 24])
                            nowy.leki[lek_nazwa] = {
                                "czestotliwosc": czestotliwosc,
                                "ostatnio": self.symulowany_czas
                            }

            for lekarze_list in self.lekarze.values():
                for lekarz in lekarze_list:
                    if not lekarz.w_pracy:
                        kolor_gabinetu = "gray"
                    elif lekarz.w_gabinecie:
                        kolor_gabinetu = "lightgreen"
                    else:
                        kolor_gabinetu = "lightcoral"

                    self.canvas.itemconfig(lekarz.rect_id, fill=kolor_gabinetu)

            
            for i, pacjent in enumerate(self.wypisani):
                x = 1550 + (i % 7) * 20
                y = 770 + (i // 7) * 35
                pacjent.move_to(x, y)

            
            for i, pacjent in enumerate(self.zmarli):
                x = 1750 + (i % 5) * 20
                y = 770 + (i // 5) * 35
                pacjent.move_to(x, y)

            
            self.symulacja_tick += 1
            if self.symulacja_tick >= 10:
                self.symulowany_czas += 60
                self.symulacja_tick = 0

            
            self.canvas.delete("leki_info")  #  USUN stare etykiety przed rysowaniem nowych

            for i, (nazwa, lek) in enumerate(self.leki.items()):
                self.canvas.create_text(
                    1600, 60 + i * 15,
                    text=f"{nazwa}: {lek.ilosc} szt.",
                    font=("Arial", 8),
                    anchor="nw",
                    tags="leki_info"
                )

            
            self.canvas.after(100, self.update_gui)
        except Exception as e:
            print(f"Blad aktualizacji GUI: {e}")
            traceback.print_exc()
            self.canvas.after(100, self.update_gui)

    def zapisz_statystyki_csv(self):
        dzien = self.symulowany_czas // 1440
        nowi = self.statystyki["nowi_pacjenci_dzienni"][dzien] if dzien < len(
            self.statystyki["nowi_pacjenci_dzienni"]) else [0, 0, 0]
        krytyczni, sredni, leccy = nowi

        sr_izba = srednia(self.statystyki["sredni_czas_w_izbie"])
        sr_ocz = srednia(self.statystyki["sredni_czas_ocz_na_lozko"])
        sr_szpital = srednia(self.statystyki["sredni_czas_w_szpitalu"])
        suma_lekow = sum(self.statystyki["leki"].values())
        badania_str = "; ".join(f"{nazwa}: {liczba}" for nazwa, liczba in self.statystyki["badania"].items())
        with open(self.csv_file, mode="a", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)  

            writer.writerow([
                dzien,
                krytyczni, sredni, leccy,
                self.statystyki["zgonow"],
                self.statystyki["wypisani"],
                sr_izba,
                sr_ocz,
                sr_szpital,
                suma_lekow,
                badania_str
            ])

        with open(self.csv_oddzialy_file, mode="a", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)

            for nazwa, oddzial in self.oddzialy.items():
                liczba_lozek = len(oddzial.lozka)
                zajete_lozka = sum(1 for p in oddzial.lozka if p is not None)
                procent_zapelnienia = round((zajete_lozka / liczba_lozek) * 100, 2) if liczba_lozek else 0

                przyjeci = sum(1 for p in self.pacjenci
                               if p.oddzial_docelowy == nazwa and
                               p.historia["czas_przyjecia_na_oddzial"] // 1440 == dzien-1)

                zgony = sum(1 for p in self.zmarli
                            if p.oddzial_docelowy == nazwa and
                            p.historia["czas_przyjecia_na_oddzial"] // 1440 == dzien-1)

                
                zgony_izba = sum(1 for p in self.zmarli
                                 if p.oddzial_docelowy is None and
                                 p.historia.get("czas_przyjecia_na_oddzial", 0) == 0 and
                                 p.historia["czas_przybycia"] // 1440 == dzien - 1)

                badania_izba = sum(1 for p in self.pacjenci
                                   if p.oddzial_docelowy is None and
                                   any(p.historia["badania"]) and
                                   p.historia["czas_przybycia"] // 1440 == dzien - 1)

                writer.writerow([
                    dzien, "Izba Przyjec",  # oddzial
                    0,  
                    zgony_izba,  
                    0,  
                    0,  
                    0,  
                    0  
                ])
                print("XXXXXXXXXXXXXXXXXXX")
                for p in self.zmarli:
                    print(f"Pacjent {p.id} zmarl na oddziale {p.oddzial_docelowy} w dniu {p.historia['czas_przyjecia_na_oddzial'] // 1440 + 1}")

                wypisy = sum(1 for p in self.wypisani
                             if p.oddzial_docelowy == nazwa and
                             p.historia["czas_przyjecia_na_oddzial"] // 1440 == dzien-1)


                badania = sum(1 for p in self.pacjenci
                              if p.oddzial_docelowy == nazwa and
                              any(b for b in p.historia["badania"])
                              and p.historia["czas_przyjecia_na_oddzial"] // 1440 == dzien-1)

                liczba_pacjentow = sum(1 for p in self.pacjenci
                                       if p.oddzial_docelowy == nazwa)
                liczba_lekarzy = len(self.lekarze[nazwa]) if nazwa in self.lekarze else 1
                pacjenci_na_lekarza = round(liczba_pacjentow / liczba_lekarzy, 2) if liczba_lekarzy else 0

                writer.writerow([
                    dzien, nazwa, przyjeci, zgony, wypisy, badania,
                    procent_zapelnienia, pacjenci_na_lekarza
                ])

    def zakoncz_program(self):
        for p in self.pielegniarki:
            p.zatrzymaj()
        for lekarze_list in self.lekarze.values():
            for l in lekarze_list:
                l.zatrzymaj()
        for d in self.diagnosci:
            d.zatrzymaj()
        self.root.destroy()
        sys.exit()


if __name__ == "__main__":
    root = tk.Tk()
    root.title("Symulacja pacjentow w szpitalu - kolejki do lekarza i lozek")
    app = Symulacja(root)
    root.mainloop()           